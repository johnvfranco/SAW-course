import "SHA512.cry";

// Given a value v of type ty, allocate and return a pointer to memory storing v
let alloc_init ty v = do {
  p <- crucible_alloc ty;
  crucible_points_to p v;
  return p;
};

// Given a name n and a type ty, allocate a fresh variable x of type ty and return
// a tuple of x and a pointer to x.
let pointer_to_fresh n ty = do {
  x <- crucible_fresh_var n ty;
  p <- alloc_init ty (crucible_term x);
  return (x, p);
};

// Given a value v of type ty, allocate and return a read only pointer to memory
// storing v
let alloc_init_readonly ty v = do {
  p <- crucible_alloc_readonly ty;
  crucible_points_to p v;
  return p;
};


// Given a name n and a type ty, allocate a fresh variable x of type ty and return
// a tuple of x and a read only pointer to x.
let pointer_to_fresh_readonly n ty = do {
  x <- crucible_fresh_var n ty;
  p <- alloc_init_readonly ty (crucible_term x);
  return (x, p);
};

// Specify the sha512_state_st struct from a SHAState
let points_to_sha512_state_st_common ptr (h, sz, block, n) num = do {
  llvm_points_to (llvm_field ptr "h") (llvm_term h);

  // Specify `sha512_state_st.Nl` and `sha512_state_st.Nh` contain `sz`
  llvm_points_to_at_type (llvm_field ptr "Nl") (llvm_int 128) (llvm_term sz);

  if eval_bool {{ `num == 0 }} then do {
    // Do not specify anything about `sha512_state_st.p`
    return ();
  } else do {
    // Specify that the first `num` bytes of `sha512_state_st.p` match the
    // first `num` bits of `state.block`.
    // Untyped check because the size of `sha512_state_st.p` does not match
    // the size of (take`{num} state.block) unless `num` == `128`
    llvm_points_to_untyped (llvm_field ptr "p") (llvm_term block);
  };

  llvm_points_to (llvm_field ptr "num") (llvm_term n);
  llvm_points_to (llvm_field ptr "md_len") (llvm_term {{ `64 : [32] }});
};

let points_to_sha512_state_st ptr state num = do {
 points_to_sha512_state_st_common
   ptr
   ({{ state.h }}, {{ state.sz }}, {{ take`{num} state.block }}, {{ state.n }}) num;
};

let pointer_to_fresh_sha512_state_st name n = do {
  // Hash value
  h <- llvm_fresh_var (str_concat name ".h") (llvm_array 8 (llvm_int 64));
  // Message block
  block <- if eval_bool {{ `n == 0 }} then do {
    // Do not specify anything about `sha512_state_st.p`
    return {{ [] : [0][8] }};
  } else do {
    llvm_fresh_var (str_concat name ".block") (llvm_array n (llvm_int 8));
  };
  // Size
  sz <- llvm_fresh_var (str_concat name ".sz") (llvm_int 128);
  // Build SHAState, padding `block` with zeros to fit
  let state = {{ { h = h, block = (block # zero) : [128][8], n = `n : [32], sz = sz } }};
  // `ptr` is a pointer to a `sha512_state_st` struct
  ptr <- llvm_alloc (llvm_struct "struct.sha512_state_st");
  points_to_sha512_state_st_common ptr (h, sz, block, {{ `n : [32]}}) n;

  return (state, ptr);
};

let Sigma0_setup = do {
  x <- llvm_fresh_var "x" (llvm_int 64);
  llvm_execute_func [llvm_term x];
  llvm_return (llvm_term {{ S0 x }});
};

let Sigma1_setup = do {
  x <- llvm_fresh_var "x" (llvm_int 64);
  llvm_execute_func [llvm_term x];
  llvm_return (llvm_term {{ S1 x }});
};

let sigma0_setup = do {
  x <- llvm_fresh_var "x" (llvm_int 64);
  llvm_execute_func [llvm_term x];
  llvm_return (llvm_term {{ s0 x }});
};

let sigma1_setup = do {
  x <- llvm_fresh_var "x" (llvm_int 64);
  llvm_execute_func [llvm_term x];
  llvm_return (llvm_term {{ s1 x }});
};

let Ch_setup = do {
  x <- llvm_fresh_var "x" (llvm_int 64);
  y <- llvm_fresh_var "y" (llvm_int 64);
  z <- llvm_fresh_var "z" (llvm_int 64);
  llvm_execute_func [llvm_term x, llvm_term y, llvm_term z];
  llvm_return (llvm_term {{ Ch x y z }});
};

let sha512_block_data_order_setup = do {
  // Precondition: `state_ptr` points to an array of 8 64 bit integers
  (state, state_ptr) <- pointer_to_fresh "state" (llvm_array 8 (llvm_int 64));

  // Precondition: `data_ptr` points to a const message block
  (data, data_ptr) <- pointer_to_fresh_readonly "data" (llvm_array 128 (llvm_int 8));

  // Call function with `state_ptr`, `data_ptr`, and the value `1`
  llvm_execute_func [state_ptr, data_ptr, llvm_term {{ 1 : [64] }}];

  // Postcondition: The data pointed to by `state_ptr` is equivalent to the
  // return value of the processBlock_Common Cryptol spec function applied to `state`
  // and `data`.
  llvm_points_to state_ptr (llvm_term {{ processBlock_Common state (split (join data)) }});
};

let SHA512_Update_setup num len = do {
  (sha512_ctx, sha_ptr) <- pointer_to_fresh_sha512_state_st "sha512_ctx" num;
  (data, data_ptr) <- pointer_to_fresh_readonly "data" (llvm_array len (llvm_int 8));

  llvm_execute_func [sha_ptr, data_ptr, llvm_term {{ `len : [64] }}];

  points_to_sha512_state_st
    sha_ptr
    {{ SHAUpdate sha512_ctx data }} (eval_size {| (num + len) % 128 |});
  llvm_return (llvm_term {{ 1 : [32] }});
};

let main : TopLevel () = do {
   m <- llvm_load_module "sha512.bc";
   Sigma0_ov <- llvm_verify m "Sigma0" [] true Sigma0_setup z3;
   Sigma1_ov <- llvm_verify m "Sigma1" [] true Sigma1_setup z3;
   sigma0_ov <- llvm_verify m "sigma0" [] true sigma0_setup z3;
   sigma1_ov <- llvm_verify m "sigma1" [] true sigma1_setup z3;
   Ch_ov <- llvm_verify m "Ch" [] true Ch_setup z3;
   sha512_block_data_order_ov <- llvm_verify m "sha512_block_data_order"
                                 [Sigma0_ov, Sigma1_ov, sigma0_ov, sigma1_ov, Ch_ov] true
                                 sha512_block_data_order_setup
                                 (w4_unint_z3
											   ["SIGMA_0", "SIGMA_1", "sigma_0", "sigma_1", "Ch"]);
	SHA512_Update_0_240_ov     <- llvm_verify m "SHA512_Update"
	                              [sha512_block_data_order_ov] true
									      (SHA512_Update_setup 0 240)
									      (w4_unint_z3 ["processBlock_Common"]);
   SHA512_Update_0_127_ov     <- llvm_verify m "SHA512_Update"
                                 [sha512_block_data_order_ov] true
                                 (SHA512_Update_setup 0 127)
                                 (w4_unint_z3 ["processBlock_Common"]);
   SHA512_Update_127_241_ov   <- llvm_verify m "SHA512_Update"
                                 [sha512_block_data_order_ov] true
                                 (SHA512_Update_setup 127 241)
                                 (w4_unint_z3 ["processBlock_Common"]);
   print "Done!";
};
