import perm

// Sort algorithm: let lst be the sequence to sort and let acc initially 
// be a sequence of -1s of the same length as lst.   In a round, elements
// of lst are compared with elements of acc, starting from the right (greatest
// elements first).  If the lst element is greater than the existing acc
// element, the acc element moves down (to the left) by 1 position and
// makes way for the lst element to be placed where the acc element had been.
// If the lst element is not greater then it is placed before (to the left
// of) the acc element it is compared with.  This process has the effect
// that greater elements move at most one position to the right and lesser
// elements at most one position to the left on a round. Thus, running a 
// number of rounds equal to the length of lst, output of one round being
// input to the next round, sorts lst.  Empty input sequence is not allowed.
round : {n, a} (Literal 1 a, Ring a, Cmp a, fin n) => [1 + n]a -> [1 + n]a -> [1 + n]a
round lst acc = (func lst ((length lst)-1) acc)
  where
    func lt i ac =
      if i == -1
      then ac
      else if (last ac) == -1 \/ lt@i <= ac@(i+1)
           then func lt (i-1) (insert ac (lt@i) i) 
           else func lt (i-1) (insert (insert ac (ac@(i+1)) i) (lt@i) (i+1))

// replace the ith element of sequence lst with the number m
insert lst m i = [ if k==i then m else x | x <- lst | k <- [0...]]

// Create a sequence of -1s equal in length to input sequence lst
makeNegs lst = [ -1 | i <- lst ]

// Sort a given input sequence lst - the a numbers of rounds equal to
// the length of lst
sort lst = z ! 0
  where
    z = [ round x (makeNegs lst)  | x <- [lst]#z | i <- lst ]

// Returns True if and only if the sequence lst has no -1s
valid lst = z ! 0
  where
    z = [True]#[ ~(x == -1) /\ y | x <- lst | y <- z ]

// Theorem stating a valid sequence lst implies lst is a permutation
// of (sort lst)
isAPerm : [6][32] -> Bit
property isAPerm lst = ~(valid lst) \/ perm lst (sort lst)

// Returns True if and only if for every pair of consecutive numbers in
// lst, the left number is never greater than the right number
nondecreasing : [6][32] -> Bit
nondecreasing lst = z ! 0
  where
    z = [True]#[ if (j1 <= j2) /\ k then True else False
               | k <- z | j1 <- lst | j2 <- drop `{1} lst]

// Theorem stating a valid sequence lst implies the sequence (sort lst)
// is nondecreasing
sortIsOrdered : [6][32] -> Bit
property sortIsOrdered lst = ~(valid lst) \/ nondecreasing (sort lst)

