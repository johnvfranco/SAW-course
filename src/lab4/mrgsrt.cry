import perm

/************************************************************************/
/*                                                                      */
/*  The goal of this page:                                              */
/*    Show how a specification of an operation on finite lists          */
/*    can be expressed recursively by switching to infinite lists       */
/*    and back                                                          */
/*                                                                      */
/*  Define mergesort on lists of positive numbers and prove correctness */
/************************************************************************/
/* Mergesort - but only for positive numbers 
   subfunctions operate on infinite lists to allow for recursion
   subfunctions are as follows:
   splito: 
     Input - lst=finite list
     Output - infinite list, padded with -1s after the split elements
     Process: best described as [ lst@i | i <- [1,3...] ]
   splite:
     Input - lst=finite list
     Output - infinite list, padded with -1s after the split elements
     Process: best described as [ lst@i | i <- [0,2...] ]
   merge:
     Inputs: px, py - two infinite lists in nondecreasing order (padded with -1s)
     Output: infinite list, nondecreasing, containing all of px & py, padded
     Process: merge two padded infinite lists, up to the padding
     if px@0 is -1 then return py, if py@0 is -1 then return px
     otherwise if px@0 is less than py@0 concat px@0 with (merge (tail(px) py)
     otherwise concat py@0 with (merge px (tail py))
   mergesrt:
     Input: p=infinite list (padded)
     Output: padded, nondecreasing infinite list that is a permutation of x
     Process: sort list p up to the padding
     recursively merge the mergesrt of the even elements of p with the mergesrt
     of the odd elements of p
*/

//  Input: lst - -1 padded finite sequence of numbers
//  Output: lst with only odd indexed elements followed by -1 padding
splito : {n,a} [n]a -> [inf]a
splito lst = [ lst@i | i <- [1,3...] ]

//  Input: lst - -1 padded finite sequence of numbers
//  Output: lst with only even indexed elements followed by -1 padding
splite : {n,a} [n]a -> [inf]a
splite lst = [ lst@i | i <- [0,2...] ]

//  Inputs: px, py: two infinite lists in nondecreasing order (padded with -1s)
//  Output: infinite list, nondecreasing, containing all of px and py, padded
merge : {a} (Literal 1 a, Ring a, Cmp a) => [inf]a -> [inf]a -> [inf]a
merge px py = 
      if px@0 == -1 then py
      else if py@0 == -1 then px
      else if px@0 < py@0 then [px@0]#(merge (tail px) py)
      else [py@0]#(merge px (tail py))

//  Input: finite sequence lst of numbers
//  Output: finite nondecreasing sequence of numbers that is permutation of lst
mergesort : {cnt, a} (fin cnt, fin a, a >= 1, cnt >= 0) => [cnt][a] -> [cnt][a]
mergesort lst = take `{cnt} (mergesrt ax)
  where
    mergesrt p = 
      if p@0 == -1 \/ p@1 == -1 then p
      else merge (mergesrt (splite p)) (mergesrt (splito p))
    ax = lst#[-1,-1 ...]

// For the following use :s base=10
res00 = take `{3} (splite [1,2,3,4,5,6])
res01 = take `{3} (splite [1,2,3,4,5,6,7])
res02 = take `{4} (splite [1,2,3,4,5,6,7,8])

res10 = take `{3} (splito [1,2,3,4,5,6])
res11 = take `{4} (splito [1,2,3,4,5,6,7])
res12 = take `{4} (splito [1,2,3,4,5,6,7,8])

res20 = take `{8} (merge ([1,5,7,10]#[-1,-1 ...]) ([3,7,11,14]#[-1,-1 ...]))

res30 = mergesort [6,7,8,2,3,4,1,11,23,5]
res31 = mergesort [1]
res32 = mergesort [2,2]
res33 = mergesort [2,1]
res34 = mergesort [9,8,7,6,5,4,3,2,1]
res35 = mergesort [9,8,7,6,5,4,3,2,1,6]
res36 = mergesort [9,8,7,6,5,4,3,2,1,6,10]
res37 = mergesort [9,8,7,6,5,4,3,2,10,6,1]
res38 = mergesort [1,9,8,7,6,5,4,3,2,1,6]
res39 = mergesort [10,9,8,7,6,5,4,3,2,1,6]

results = [take `{11} (res30#[-1,-1...]),
           take `{11} (res31#[-1,-1...]),
           take `{11} (res32#[-1,-1...]),
           take `{11} (res33#[-1,-1...]),
           take `{11} (res34#[-1,-1...]),
           take `{11} (res35#[-1,-1...]),
           take `{11} (res36#[-1,-1...]),
           take `{11} (res37#[-1,-1...]),
           take `{11} (res38#[-1,-1...]),
           take `{11} (res39#[-1,-1...])]

valid lst = z ! 0
  where
    z = [True]#[~(x == -1) /\ y | x <- lst | y <- z ]

isAPerm : [6][32] -> Bit
property isAPerm lst = ~(valid lst) \/ perm lst (mergesort lst)

// use cvc4 for isAPerm (0.595s)

nondecreasing lst = z ! 0
  where
    z = [True]#[ if (j1 <= j2) /\ k then True else False
               | k <- z | j1 <- lst | j2 <- drop `{1} lst]

mergesortIsOrdered : [6][32] -> Bit
property mergesortIsOrdered lst =
    ~(valid lst) \/ nondecreasing (mergesort lst)

// use cvc4 for mergesortIsOrdered (0.176s)
