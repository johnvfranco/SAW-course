// Note: perm [] [] does not return a graceful True -
// didn't bother to worry about it
remove lst n = drop `{2} [w.0 | w <- res]
  where
    res = [(-1,False)]#[ if (q.1 == False /\ ~(za == n)) then (za, q.1) else (zb, True)
                       | za <- [-1]#lst | zb <- lst#[-1] | q <- res ]
// instead of explanation I give three examples of progression of res:
// res output on remove [2,5,3,7,3,2,0,3] 7
// [(-1, False), (-1, False), (2, False), (5, False), (3, False),
//  (3, True), (2, True), (0, True), (3, True), (-1, True)
//
// res output on remove [2,5,3,7,3,2,0,3] 9
// [(-1, False), (-1, False), (2, False), (5, False), (3, False),
//  (7, False), (3, False), (2, False), (0, False), (3, False)]
//
// res output on remove [2,5,3,7,3,2,0,3] 3 (only the 1st 3 is removed:
// reason for Bit)
// [(-1, False), (-1, False), (2, False), (5, False), (7, True),
//  (3, True), (2, True), (0, True), (3, True), (-1, True)]

member lst n = (res ! 0)
  where
    res = [False]#[ ss \/ (p == n) | p <- lst | ss <- res ]

perm x y = if (length x) == (length y) then (res ! 0).1 else False
  where
    res = [ ((remove q.0 p), (member q.0 p) /\ q.1) | q <- [(y,True)]#res | p <- x ]

res00 = perm [1] [0]
res01 = perm [1] [1]
res02 = perm [1,1,2] [2,1,2]
res03 = perm [1,2,3] [1,2,3,3]
res04 = perm [3,2,1] [1,3,2]
res05 = perm [1,2,3,4] [1,2,3]
res06 = perm [1,2,3,3] [1,2,3]
res07 = perm [11,44,23,82,66,91,42,41,63,72,82,12,16,21,91,72,71]
             [44,91,72,11,71,42,12,63,16,23,91,82,21,72,41,82,66]
res08 = perm [11,44,23,82,66,91,42,41,63,72,82,12,16,21,91,72,71]
             [44,71,72,11,71,42,12,63,16,23,91,82,21,72,41,82,66]

results = [res00, res01, res02, res03, res04, res05, res06, res07, res08]
