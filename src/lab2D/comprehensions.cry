// Simple example of a comprehension
v01 = [x | x <- [1...] | y <- [1..10]]
// v01 is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].
// Note: x and y take values interactively and simultaneously.  x is
// taken from an infinite list but the comprehension is controlled
// by y as it runs out of tokens after receiving value 10.

v02 = [ (x,y) | x <- [10..12] , y <- [1..4]]
// v02 is [(10, 1), (10, 2), (10, 3), (10, 4), (11, 1), (11, 2),
//         (11, 3), (11, 4), (12, 1), (12, 2), (12, 3), (12, 4)]
// Note: pairs are constructed from all possible combinations
// of values of x between 10 and 12 and y between 1 and 4.

v03 = [ (x,y,z) | x <- [10,11] , y <- [20,21], z <- [30,31]]
// v03 is [(10, 20, 30), (10, 20, 31), (10, 21, 30), (10, 21, 31),
//         (11, 20, 30), (11, 20, 31), (11, 21, 30), (11, 21, 31)]
// Note: all possible triples from values taken by x, y, and z

v04 = [ (x,y,z) | x <- [10,11] , y <- [20,21] | z <- [30,31,32]]
// v04 is [(10, 20, 30), (10, 21, 31), (11, 20, 32)]
// Note: the rightmost | controls the number of triples output

v05 = [1]#[ x+y | x <- v05 | y <- [1]#v05 ]
v06 = take `{10} v05
// v05 is an infinite sequence [1, 2, 3, 5, 8, ...] of Fibonaccis
// v06 is a finite subsequence of 10 of the first 10 of those
// Note: as v05 is being constructed, it is used inside the
// comprehension to construct the next element of the sequence v05

// Pigeon hole formulas - set base=10
ph = [1,1,1,0,1,2,2,1,1]  // shows number of pigeons in each of 9 holes
v07 = [0]#[ x+y | x <- ph | y <- v07 ]  // sum all holes to get # pigeons
v08 = v07 ! 0 // number of pigeons is last State
// v07 is [0, 1, 2, 3, 3, 4, 6, 8, 9, 10]
// v08 is 10

// Condition that no hole has > 1 pigeon - set base=2
v09 = [True]#[ (x <= 1) /\ y | x <- ph | y <- v09 ]
v10 = v09 ! 0
// v09 is 0b1111110000
// v10 is False meaning at least one hole has more than one pigeon

// The following reverses a sequence
lst = [16,42,23,77]
v11 = [lst] # [[b]#(tail (a >> 1)) | a <- v11 | b <- lst ]
v12 = v11 ! 0
// v11 is [[16, 42, 23, 77], [16, 16, 42, 23], [42, 16, 16, 42],
//         [23, 42, 16, 16], [77, 23, 42, 16]]
// v12 is [77, 23, 42, 16]

// Creates a list of 16 numbers, beginning with the first one, p,
// as input, doubled, then followed by numbers that are double the
// previous one.
p = 3
v13 = [ 2*lr | lr <- [p] # v13 | k <- [1 .. 16]]
// v13 is [6, 12, 24, 48, 96, 192, 384, 768, 1536, 3072, 6144,
//         12288, 24576, 49152, 98304, 196608]

// An infinite version of the above
v14 = [2*lr | lr <- [p] # v14 | k <- [1...]]
v15 = take `{12} v14
// v14 is [6, 12, 24, 48, 96, ...]
// v15 is [6, 12, 24, 48, 96, 192, 384, 768, 1536, 3072, 6144, 12288]

// Race course problem, location and fuel
// loc: percentage of racetrack from a starting point for each
//      fueling station.  All ratios are less than 1
// gas: percentage of total fuel needed to traverse course at
//      each station.  Sum of all ratios is 1
loc = [(ratio 2 10),(ratio 3 10),(ratio 45 100),(ratio 49 100),
       (ratio 71 100),(ratio 78 100),(ratio 81 100),(ratio 98 100)]
gas = [(ratio 1 10),(ratio 13 100),(ratio 1 10),(ratio 15 100),
       (ratio 23 100),(ratio 7 100),(ratio 17 100),(ratio 5 100)]
gas_sum = sum gas
// gas_sum is (ratio 1 1)
v16 = [(0,0,-1)]#[(if (ps-ss.0 > ss.1) then (ss.0+fs, ps-ss.0, i)
                                       else (ss.0+fs, ss.1, ss.2))
                 | fs <- gas | ps <- loc | ss <- v16 | i <- [0 ...]]
// v16 is [((ratio 0 1), (ratio 0 1), -1),
//         ((ratio 1 10), (ratio 1 5), 0),
//         ((ratio 23 100), (ratio 1 5), 0),
//         ((ratio 33 100), (ratio 11 50), 2),
//         ((ratio 12 25), (ratio 11 50), 2),
//         ((ratio 71 100), (ratio 23 100), 4),
//         ((ratio 39 50), (ratio 23 100), 4),
//         ((ratio 19 20), (ratio 23 100), 4),
//         ((ratio 1 1), (ratio 23 100), 4)]
station_to_start_from = (v16 ! 0).2
location_of_station = loc @ station_to_start_from
// station_to_start_from is fifth one (5th is at pos 4 in sequence)
// location_of_station is (ratio 71 100)