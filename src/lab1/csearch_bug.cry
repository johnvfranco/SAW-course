// Binary search in cryptol - cryptol captures the bug

// The "typical" coding of binary search using (high+low)/2 style
// indexing is bogus due to overflow, as observed in many other
// languages.

// ff finds the maximum index which is no greater than 255
ff : {a, b, c} (fin c, c >= width a, c >= 8) => [a]b -> [c]
ff lst = if (length lst) > 255 then 255 else (length lst)-1

// Binary-search
bsearch : {n,a} (Cmp a, 8 >= width n, fin n) => (a, [n]a) -> [8]
bsearch (key, lst) = search (0, (ff lst), w)
  where 
    w = length lst
    // The function "search" is not symbolically terminating,
    // so we use an "extra" recursion counter (c) for termination purposes
    // Note that this is only needed when doing the proof..
    search : {d} (fin d, d >= 1) => ([8], [8], [d]) -> [8]
    search (low, high, c) =
      if (c == 0) \/ (low > high) \/ (high > w) then -1
      else if midVal < key then search (mid+1, high, c-1)
      else if midVal > key then search (low, mid-1, c-1)
      else mid
      where  
         midVal = lst @ mid
         mid = computeMid (low, high)

// Bad version of computing the mid; overflow
computeMid : ([8], [8]) -> [8]
computeMid (low, high) = (low + high) / 2

// Returns the first location of a given key in the given list
// or -1 if the key is not in the list
refSearchIdx : {n, a, b} (Literal 1 b, Integral b, Eq a, Eq b, fin n) => (a, [n]a) -> b
refSearchIdx (key, lst) = s!0
   where
     s = [-1]#[ if (key == x /\ h == -1) then c else h | x <- lst |  h <- s | c <- [0...]]

lst3 = [0,   2,   3,   5,   6,   8,   9,  10,  11,  12,  13,  14,  16,  18,
       20,  21,  22,  23,  24,  25,  26,  27,  28,  30,  31,  32,  33,  34,
       35,  36,  37,  39,  40,  41,  32,  43,  44,  45,  46,  47,  49,  50,
       51,  52,  53,  54,  56,  58,  59,  60,  61,  62,  63,  65,  66,  67,
       68,  69,  70,  71,  72,  73,  74,  76,  77,  78,  79,  80,  81,  82,
       84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
       98,  99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114,
      116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132,
      133, 134, 135, 136, 138, 139, 141, 143, 144, 145, 147, 148, 149, 150,
      152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 166, 167, 168,
      169, 170, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185,
      187, 188, 189, 190, 191, 192, 197, 198, 199, 200, 201, 202, 203, 204,
      206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 220, 221, 222,
      223, 224, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239,
      240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255]:[210][9]

// bsearch and refSearchIdx are hopefully equivalent when the input is
//nonDecreasing, so recognize such sequences:
onlyIncreasing : {n,a} (Cmp a, Literal 0 a, fin n) => [n]a -> Bit
onlyIncreasing lst = pairComps == ~zero
  where pairComps = [ x < x' | x  <- [0] # lst | x' <- lst ]

// Cryptol finds a counter-example demonstrating the problem
bsearchOK : [8] -> [200][8] -> Bit
property bsearchOK e lst =
  if onlyIncreasing (lst:[200][8]) 
  then bsearch (e, lst) == refSearchIdx (e, lst)
  else True

try x = bsearch (x, lst3)
ref x = refSearchIdx (x, lst3)

// Cryptol> :l csearch_bug.cry
// Loading module Cryptol
// Loading module Main
// Main>  :prove bsearchOK
// Counterexample
// bsearchOK
//   167
//   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19,
//    20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 64, 65,
//    66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
//    84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 107, 108, 109, 110, 111,
//   112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
//   125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140,
//   141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
//   155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
//   168, 169, 170, 171, 172, 173, 174, 175, 177, 180, 181, 182, 183,
//   184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197,
//   198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
//   211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
//   224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
//   237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
//   250, 251, 252, 253, 254]
//  = False
// (Total Elapsed Time: 1.979s, using "Z3")
// Main> 
