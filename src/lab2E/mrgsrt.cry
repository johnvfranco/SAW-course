module mrgsrt where
import perm

/************************************************************************/
/*                                                                      */
/*  The goal of this page:                                              */
/*    Show how a specification of an operation on finite lists          */
/*    can be expressed recursively by switching to infinite lists       */
/*    and back                                                          */
/*                                                                      */
/*  Define mergesort on lists of positive numbers and prove correctness */
/************************************************************************/
/* Mergesort - but only for positive numbers 
   subfunctions operate on infinite lists to allow for recursion
   subfunctions are as follows:
   splito: 
     Input - x=finite list
     Output - infinite list, padded with -1s after the split elements
     Process: recursive elimination of every other element, not including first
     If p@0 == -1 in function s then go no further: -1s indicate padding
   splite:
     Input - x=finite list
     Output - infinite list, padded with -1s after the split elements
     Process: recursive elimination of every other element, including the first
     If p@0 == -1 then go no further: -1s indicate padding
   merge:
     Inputs: x, y - two infinite lists in nondecreasing order (padded with -1s)
     Output: infinite list, nondecreasing, containing all of px & py, padded
     Process: merge two padded infinite lists, up to the padding
     if px@0 is -1 then return py, if py@0 is -1 then return px
     otherwise if px@0 is less than py@0 concat px@0 with (merge (tail(px) py)
     otherwise concat py@0 with (merge px (tail py))
   mergesrt:
     Input: p=infinite list (padded)
     Output: padded, nondecreasing infinite list that is a permutation of x
     Process: sort list p up to the padding
     recursively merge the mergesrt of the even elements of p with the mergesrt
     of the odd elements of p
*/

//  Input: x - finite sequence of numbers
//  Output: infinite list, padding with -1s after the split elements
splito : {n,a} (Literal 1 a, Integral a, Eq a, fin n) => [n]a -> [inf]a
splito x = s ax 
  where
    s p = if ((p@0) == -1) then p
          else if ((p@1) == -1) then (drop `{1} p)
          else [(p@1)]#(s (drop `{2} p))
    ax = x#[-1,-1 ...]

//  Input: x - finite sequence
//  Output: infinite sequence, padding with -1s after the split elements
splite : {n,a} (Literal 1 a, Integral a, Eq a, fin n) => [n]a -> [inf]a
splite x = s ax
  where
    s p = if ((p@0) == -1) then p
          else [(p@0)]#(s (drop `{2} p))
    ax = x#[-1,-1 ...]

//  Inputs: px, py: two infinite lists in nondecreasing order (padded with -1s)
//  Output: infinite list, nondecreasing, containing all of px and py, padded
merge : {a} (Literal 1 a, Ring a, Cmp a) => [inf]a -> [inf]a -> [inf]a
merge px py = 
      if (px@0) == -1 then py
      else if (py@0) == -1 then px
      else if (px@0) < (py@0) then [(px@0)]#(merge (tail px) py)
      else [(py@0)]#(merge px (tail py))

//  Input: finite sequence lst of numbers
//  Output: finite nondecreasing sequence of numbers that is permutation of lst
mergesort : {cnt, a} (fin cnt, fin a, a >= 1, cnt >= 1) => [cnt][a] -> [cnt][a]
mergesort lst = take `{cnt} (mergesrt ax)
  where
    mergesrt p = 
      if (((p@0) == -1) \/ ((p@1) == -1)) then p
      else (merge (mergesrt (splite t)) (mergesrt (splito t)))
      where
        t = take `{cnt} p
    ax = lst#[-1,-1 ...]

res00 = take `{3} (splite [1,2,3,4,5,6])
res01 = take `{3} (splite [1,2,3,4,5,6,7])
res02 = take `{4} (splite [1,2,3,4,5,6,7,8])

res10 = take `{3} (splito [1,2,3,4,5,6])
res11 = take `{4} (splito [1,2,3,4,5,6,7])
res12 = take `{4} (splito [1,2,3,4,5,6,7,8])

res20 = take `{8} (merge ([1,5,7,10]#[-1,-1 ...]) ([3,7,11,14]#[-1,-1 ...]))

res30 = mergesort [6,7,8,2,3,4,1,11,23,5]
res31 = mergesort [1]
res32 = mergesort [2,2]
res33 = mergesort [2,1]
res34 = mergesort [9,8,7,6,5,4,3,2,1]
res35 = mergesort [9,8,7,6,5,4,3,2,1,6]
res36 = mergesort [9,8,7,6,5,4,3,2,1,6,10]
res37 = mergesort [9,8,7,6,5,4,3,2,10,6,1]
res38 = mergesort [1,9,8,7,6,5,4,3,2,1,6]
res39 = mergesort [10,9,8,7,6,5,4,3,2,1,6]

results = [take `{11} (res30#[-1,-1...]),
           take `{11} (res31#[-1,-1...]),
			  take `{11} (res32#[-1,-1...]),
			  take `{11} (res33#[-1,-1...]),
			  take `{11} (res34#[-1,-1...]),
			  take `{11} (res35#[-1,-1...]),
			  take `{11} (res36#[-1,-1...]),
			  take `{11} (res37#[-1,-1...]),
			  take `{11} (res38#[-1,-1...]),
			  take `{11} (res39#[-1,-1...])]

valid lst = z ! 0
  where
    z = [True]#[~(x == -1) /\ y | x <- lst | y <- z ]

isAPerm : [4][4] -> Bit
property isAPerm lst = ~(valid lst) \/ (perm lst (mergesort lst))
